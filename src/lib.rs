#![feature(proc_macro)]

extern crate sha2;
use sha2::{Sha512, Digest};

extern crate wasm_bindgen;
use wasm_bindgen::prelude::*;


#[wasm_bindgen]
pub extern fn create_sha512 (a: &str) -> String {
// create a Sha512 object
let mut hasher = Sha512::default();

// write input message
hasher.input(a.as_bytes());

// read hash digest and consume hasher
let output = hasher.result();
//assert_eq!(output[..], [0x30, 0x9e, 0xcc, 0x48, 0x9c, 0x12, 0xd6, 0xeb,
//                        0x4c, 0xc4, 0x0f, 0x50, 0xc9, 0x02, 0xf2, 0xb4,
//                        0xd0, 0xed, 0x77, 0xee, 0x51, 0x1a, 0x7c, 0x7a,
//                        0x9b, 0xcd, 0x3c, 0xa8, 0x6d, 0x4c, 0xd8, 0x6f,
//                        0x98, 0x9d, 0xd3, 0x5b, 0xc5, 0xff, 0x49, 0x96,
//                        0x70, 0xda, 0x34, 0x25, 0x5b, 0x45, 0xb0, 0xcf,
//                        0xd8, 0x30, 0xe8, 0x1f, 0x60, 0x5d, 0xcf, 0x7d,
//                        0xc5, 0x54, 0x2e, 0x93, 0xae, 0x9c, 0xd7, 0x6f][..]);

    let mut result = String::new();
    for element in output.iter() {
        result.push_str(&format!("{:x}", element));
    }
    return result;
}
